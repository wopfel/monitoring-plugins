#!/usr/bin/perl

##################
#
#  Check a Raspberry Pi's GPIO states
#
#  Usage:   ...
#
#  Copyright (C) 2024 Bernd Arnold
#  https://github.com/wopfel/monitoring-plugins
#
##################

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;

# Sub routines
sub print_help();

my $opt_verbose;
my $opt_host;
my $opt_help;

my $answer = "";
my $crit_count = 0;
my $warn_count = 0;
my $status = "Unknown";
my @perfdata = ();
my @additional = ();


#
# Process command line options
#

GetOptions( "v|verbose"          => \$opt_verbose,
            "help"               => \$opt_help,
          )
or do { print STDERR "Error in command line argument processing. Try '$0 -help'.\n"; exit 4; };

if ( $opt_help ) {
    print_help();
    exit 4;  # Outside of the official monitoring plugin's exit codes
}


#
# Query files
#

opendir( my $dh, '/sys/class/gpio/' );
if ( ! $dh ) {
    print STDERR "Error: cannot open dir '/sys/class/gpio/'.\n";
    exit 4;
}
my @gpioports = grep { /^gpio\d+$/ && -d "/sys/class/gpio/$_" && -f "/sys/class/gpio/$_/value" } readdir( $dh );
closedir $dh;

print Dumper( \@gpioports ) if $opt_verbose;

my $gpio_count = 0;
my $high_count = 0;
my $low_count = 0;

for my $gpioport ( @gpioports ) {

    open my $fh, "<", "/sys/class/gpio/$gpioport/value";
    if ( ! $fh ) {
        print STDERR "Error: cannot open file '/sys/class/gpio/$gpioport/value'.\n";
        exit 4;
    }
    my $value = <$fh>;
    close $fh;

    # Remove newline
    chomp $value;

    print Dumper( $value ) if $opt_verbose;

    my ( $port ) = $gpioport =~ /^gpio(\d+)$/;

    $gpio_count++;
    push @perfdata, "gpio_$port=$value";
    $high_count++  if  $value == 1;
    $low_count++   if  $value == 0;
}

$answer .= "$gpio_count GPIO ports found. ";

push @perfdata, "gpio_count=$gpio_count";
push @perfdata, "high_count=$high_count";
push @perfdata, "low_count=$low_count";


#
# Check results
#

# TODO


###

if ( $crit_count ) {
    $status = "Critical";
} elsif ( $warn_count ) {
    $status = "Warning";
} else {
    $status = "Ok";
}

print "$status: ";
print "$answer\n";

print "| " . join(" ", @perfdata) . "\n"  if @perfdata;
print join("\n", @additional) . "\n"  if @additional;

exit 2 if $status eq "Critical";
exit 1 if $status eq "Warning";
exit 0 if $status eq "Ok";
exit 3;  # 'Unknown' return code



#
# Print help
#

sub print_help() {

    print STDERR <<~"END"
    Check a Raspberry Pi's GPIO value states

    Usage: $0

    Example: $0
             Just show the values


    Parameters:

        -h, --help         Show this help text
        -v, --verbose      Verbose output (for debugging)

    END

}

