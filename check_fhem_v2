#!/usr/bin/perl

##################
#
#  Check Fhem devices
#
#  Usage:   ...
#
#  Copyright (C) 2023 Bernd Arnold
#  #TODO https://github.com/wopfel/monitoring-plugins
#
##################

#
# Bei Fehlern: 
# Fhem: nur 4 von 5 sind reachable. Nicht reachable: Zigbee_IkeaMotionSensor2.
#

use strict;
use warnings;
use JSON;
use Data::Dumper;
use Getopt::Long;

my $opt_item;

sub check_motionsensors;
sub check_heizkoerperthermostate;


# Process command line options
GetOptions( "i|item=s"       => \$opt_item,
          )
or do { print STDERR "Error in command line argument processing.\n"; exit 1; };


if ( ! $opt_item ) {
    print STDERR "Error: option --item missing.\n";
    exit 4;
}



# Get CSRF token
my $token = `curl -s -D - fhem.lan:8083 | awk '/X-FHEM-csrfToken/{print \$2}'`;

#print $token;

chomp $token;


if ( $opt_item eq "heizkoerperthermostate" ) {
    check_heizkoerperthermostate();
} elsif ( $opt_item eq "motionsensors" ) {
    check_motionsensors();
} elsif ( $opt_item eq "bewegungsmelder" ) {
    check_bewegungsmelder();
} elsif ( $opt_item eq "mqttclient" ) {
    check_mqttclient();
} else {
    print STDERR "Error: invalid option --item given.\n";
    exit 4;
}



sub check_motionsensors {

my $json = `curl -s --data "fwcsrf=$token" "http://fhem.lan:8083/fhem?cmd=jsonlist2%20Zigbee_IkeaMotionSensor\\d*&XHR=1"`;

#print $json;

my $response_json = decode_json( $json );

#print Dumper( $response_json );

my $sensor_count = 0;
my $sensors_reachable = 0;
my @not_reachable = ();

for my $sensor ( @{ $response_json->{'Results'} } ) {

    $sensor_count++;

    my $name = $sensor->{'Name'};
    my $reachable = $sensor->{'Internals'}->{'reachable'};
    $sensors_reachable++  if  $reachable eq "1";
    push @not_reachable, $name  if  $reachable ne "1";

}

if ( $sensor_count == $sensors_reachable ) {
    print "Fhem: alle MotionSensors reachable\n";
    exit 0;
}

print "Fhem: nur $sensors_reachable von $sensor_count sind reachable. ";
print "Nicht reachable: ";
print join ", ", @not_reachable;
print ".\n";

exit 1;

}



sub check_heizkoerperthermostate {


my $json = `curl -g -s --data "fwcsrf=$token" "http://fhem.lan:8083/fhem?cmd=jsonlist2%20(HM_)?HeizkoerperThermostat.[^_]*&XHR=1"`;

#print $json;

my $response_json = decode_json( $json );

#print Dumper( $response_json );

my $sensor_count = 0;
my $sensors_battery_ok = 0;
my @not_battery_ok = ();

for my $sensor ( @{ $response_json->{'Results'} } ) {

    $sensor_count++;

    #print Dumper( $sensor );
    my $name = $sensor->{'Name'};
    my $battery = $sensor->{'Readings'}->{'battery'}->{'Value'};
    #print "\n\n";
    #print $name;
    #print $battery;
    $sensors_battery_ok++  if  $battery eq "ok";
    push @not_battery_ok, $name  if  $battery ne "ok";

}

if ( $sensor_count == $sensors_battery_ok ) {
    print "Fhem: alle Batterien ok\n";
    exit 0;
}

print "Fhem: nur $sensors_battery_ok von $sensor_count haben Batterie=ok. ";
print "Nicht ok ";
print join ", ", @not_battery_ok;
print ".\n";

exit 1;

}




sub check_bewegungsmelder {


my $json = `curl -g -s --data "fwcsrf=$token" "http://fhem.lan:8083/fhem?cmd=jsonlist2%20(HM_)?BewegMelder.*:FILTER=TYPE=CUL_HM&XHR=1"`;

#print $json;

my $response_json = decode_json( $json );

#print Dumper( $response_json );

my $sensor_count = 0;
my $sensors_battery_ok = 0;
my @not_battery_ok = ();

for my $sensor ( @{ $response_json->{'Results'} } ) {

    $sensor_count++;

    #print Dumper( $sensor );
    my $name = $sensor->{'Name'};
    my $battery = $sensor->{'Readings'}->{'battery'}->{'Value'};
    #print "\n\n";
    #print $name;
    #print $battery;
    $sensors_battery_ok++  if  $battery eq "ok";
    push @not_battery_ok, $name  if  $battery ne "ok";

}

if ( $sensor_count == $sensors_battery_ok ) {
    print "Fhem: alle Batterien ok\n";
    exit 0;
}

print "Fhem: nur $sensors_battery_ok von $sensor_count haben Batterie=ok. ";
print "Nicht ok ";
print join ", ", @not_battery_ok;
print ".\n";

exit 1;

}





#
# Check if the state of MQTTClient is "opened"
#

sub check_mqttclient {


my $json = `curl -g -s --data "fwcsrf=$token" "http://fhem.lan:8083/fhem?cmd=jsonlist2%20MQTT2Client&XHR=1"`;

#print $json;

my $response_json = decode_json( $json );

#print Dumper( $response_json );

my $device_count = 0;
my $device_ok = 0;
my @device_not_ok = ();
my @additional_info = ();

for my $device ( @{ $response_json->{'Results'} } ) {

    $device_count++;

    #print Dumper( $device );
    my $name = $device->{'Name'};
    my $state_value = $device->{'Readings'}->{'state'}->{'Value'};
    #print "\n\n";
    #print $name;
    #print $state_value;

    if ( $state_value eq "opened" ) {
        $device_ok++;
	push @additional_info, "[OK] Device '$name'";
    } else {
        push @device_not_ok, $name;
	push @additional_info, "[WARNING] Device '$name'";
    }

}

if ( $device_count == $device_ok ) {
    print "Fhem: alle Devices ok\n";
    print join "\n", @additional_info;
    print ".\n";
    exit 0;
}

print "Fhem: nur $device_ok von $device_count haben state=opened. ";
print "Nicht ok ";
print join ", ", @device_not_ok;
print ".\n";
print join "\n", @additional_info;
print ".\n";

exit 1;

}
