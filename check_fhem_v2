#!/usr/bin/perl

##################
#
#  Check Fhem devices
#
#  Usage:   ...
#
#  Copyright (C) 2023 Bernd Arnold
#  #TODO https://github.com/wopfel/monitoring-plugins
#
##################

#
# Bei Fehlern: 
# Fhem: nur 4 von 5 sind reachable. Nicht reachable: Zigbee_IkeaMotionSensor2.
#

use strict;
use warnings;
use JSON;
use Data::Dumper;
use Getopt::Long;

my $opt_item;

my $answer = "";
my $crit_count = 0;
my $warn_count = 0;
my $status = "Unknown";
my @perfdata = ();
my @additional = ();

sub check_motionsensors;
sub check_heizkoerperthermostate;


# Process command line options
GetOptions( "i|item=s"       => \$opt_item,
          )
or do { print STDERR "Error in command line argument processing.\n"; exit 1; };


if ( ! $opt_item ) {
    print STDERR "Error: option --item missing.\n";
    exit 4;
}



# Get CSRF token
my $token = `curl -s -D - fhem.lan:8083 | awk '/X-FHEM-csrfToken/{print \$2}'`;

#print $token;

chomp $token;


if ( $opt_item eq "heizkoerperthermostate" ) {
    check_heizkoerperthermostate();
} elsif ( $opt_item eq "motionsensors" ) {
    check_motionsensors();
} elsif ( $opt_item eq "bewegungsmelder" ) {
    check_bewegungsmelder();
} elsif ( $opt_item eq "mqttclient" ) {
    check_mqttclient();
} else {
    print STDERR "Error: invalid option --item given.\n";
    exit 4;
}


#
# Build output
#

if ( $crit_count ) {
    $status = "Critical";
} elsif ( $warn_count ) {
    $status = "Warning";
} else {
    $status = "Ok";
}

print "$status: ";
print "$answer\n";

print "| " . join(" ", @perfdata) . "\n"  if @perfdata;
print join("\n", @additional) . "\n"  if @additional;

exit 2 if $status eq "Critical";
exit 1 if $status eq "Warning";
exit 0 if $status eq "Ok";
exit 3; # 'Unknown' return code



sub check_motionsensors {

my $json = `curl -s --data "fwcsrf=$token" "http://fhem.lan:8083/fhem?cmd=jsonlist2%20Zigbee_IkeaMotionSensor\\d*&XHR=1"`;

#print $json;

my $response_json = decode_json( $json );

#print Dumper( $response_json );

my $device_count = 0;
my $device_ok = 0;

for my $sensor ( @{ $response_json->{'Results'} } ) {

    $device_count++;

    my $name = $sensor->{'Name'};
    my $reachable = $sensor->{'Internals'}->{'reachable'};

    if ( $reachable eq "1" ) {
        $device_ok++;
	push @additional, "[OK] Device '$name'";
    } else {
	$warn_count++;
	push @additional, "[WARNING] Device '$name'";
    }
}

if ( $device_count == $device_ok ) {
    $answer .= "Alle Fhem-Devices reachable. ";
} else {
    $warn_count++;
    $answer .= "nur $device_ok von $device_count sind reachable. ";
}

}



sub check_heizkoerperthermostate {


my $json = `curl -g -s --data "fwcsrf=$token" "http://fhem.lan:8083/fhem?cmd=jsonlist2%20(HM_)?HeizkoerperThermostat.[^_]*&XHR=1"`;

#print $json;

my $response_json = decode_json( $json );

#print Dumper( $response_json );

my $device_count = 0;
my $device_ok = 0;

for my $sensor ( @{ $response_json->{'Results'} } ) {

    $device_count++;

    #print Dumper( $sensor );
    my $name = $sensor->{'Name'};
    my $battery = $sensor->{'Readings'}->{'battery'}->{'Value'};
    #print "\n\n";
    #print $name;
    #print $battery;

    if ( $battery eq "ok" ) {
        $device_ok++;
	push @additional, "[OK] Device '$name'";
    } else {
	$warn_count++;
	push @additional, "[WARNING] Device '$name'";
    }
}

if ( $device_count == $device_ok ) {
    $answer .= "Alle Fhem-Devices ok. ";
} else {
    $warn_count++;
    $answer .= "nur $device_ok von $device_count haben Batterie=ok. ";
}

}




sub check_bewegungsmelder {


my $json = `curl -g -s --data "fwcsrf=$token" "http://fhem.lan:8083/fhem?cmd=jsonlist2%20(HM_)?BewegMelder.*:FILTER=TYPE=CUL_HM&XHR=1"`;

#print $json;

my $response_json = decode_json( $json );

#print Dumper( $response_json );

my $device_count = 0;
my $device_ok = 0;

for my $sensor ( @{ $response_json->{'Results'} } ) {

    $device_count++;

    #print Dumper( $sensor );
    my $name = $sensor->{'Name'};
    my $battery = $sensor->{'Readings'}->{'battery'}->{'Value'};
    #print "\n\n";
    #print $name;
    #print $battery;

    if ( $battery eq "ok" ) {
        $device_ok++;
	push @additional, "[OK] Device '$name'";
    } else {
	$warn_count++;
	push @additional, "[WARNING] Device '$name'";
    }
}

if ( $device_count == $device_ok ) {
    $answer .= "Alle Fhem-Devices ok. ";
} else {
    $warn_count++;
    $answer .= "nur $device_ok von $device_count haben Batterie=ok. ";
}

}





#
# Check if the state of MQTTClient is "opened"
#

sub check_mqttclient {


my $json = `curl -g -s --data "fwcsrf=$token" "http://fhem.lan:8083/fhem?cmd=jsonlist2%20MQTT2Client&XHR=1"`;

#print $json;

my $response_json = decode_json( $json );

#print Dumper( $response_json );

my $device_count = 0;
my $device_ok = 0;

for my $device ( @{ $response_json->{'Results'} } ) {

    $device_count++;

    #print Dumper( $device );
    my $name = $device->{'Name'};
    my $state_value = $device->{'Readings'}->{'state'}->{'Value'};
    #print "\n\n";
    #print $name;
    #print $state_value;

    if ( $state_value eq "opened" ) {
        $device_ok++;
	push @additional, "[OK] Device '$name'";
    } else {
	$warn_count++;
	push @additional, "[WARNING] Device '$name'";
    }

}

if ( $device_count == $device_ok ) {
    $answer .= "Alle Fhem-Devices ok. ";
} else {
    $warn_count++;
    $answer .= "nur $device_ok von $device_count haben state=opened. ";
}

}
