#!/usr/bin/perl

##################
#
#  Check Fhem devices
#
#  Usage:   ...
#
#  Copyright (C) 2023 Bernd Arnold
#  #TODO https://github.com/wopfel/monitoring-plugins
#
##################

#
# Bei Fehlern: 
# Fhem: nur 4 von 5 sind reachable. Nicht reachable: Zigbee_IkeaMotionSensor2.
#

use strict;
use warnings;
use LWP::UserAgent;
use JSON;
use Data::Dumper;
use Getopt::Long;

my $opt_host;
my $opt_item;
my $opt_verbose;

my $answer = "";
my $crit_count = 0;
my $warn_count = 0;
my $status = "Unknown";
my @perfdata = ();
my @additional = ();

sub check_motionsensors;
sub check_heizkoerperthermostate;


# Process command line options
GetOptions( "h|hostname=s"   => \$opt_host,
            "i|item=s"       => \$opt_item,
            "v|verbose"      => \$opt_verbose,
)
    or do { print STDERR "Error in command line argument processing.\n"; exit 1; };


if ( ! $opt_host ) {
    print STDERR "Error: option --host missing.\n";
    exit 4;
}

if ( ! $opt_item ) {
    print STDERR "Error: option --item missing.\n";
    exit 4;
}



# Get CSRF token
my $ua = LWP::UserAgent->new;
my $response = $ua->get( "http://$opt_host:8083/" );
my $token = $response->header('X-FHEM-csrfToken');

unless ( $response->is_success ) {
    print "UNKNOWN: $response->status_line";
    exit 3;
}

print $response->decoded_content if $opt_verbose;

print Dumper( $token )  if  $opt_verbose;


if ( $opt_item eq "heizkoerperthermostate" ) {
    check_heizkoerperthermostate();
} elsif ( $opt_item eq "motionsensors" ) {
    check_motionsensors();
} elsif ( $opt_item eq "bewegungsmelder" ) {
    check_bewegungsmelder();
} elsif ( $opt_item eq "mqttclient" ) {
    check_mqttclient();
} else {
    print STDERR "Error: invalid option --item given.\n";
    exit 4;
}


#
# Build output
#

if ( $crit_count ) {
    $status = "Critical";
} elsif ( $warn_count ) {
    $status = "Warning";
} else {
    $status = "Ok";
}

print "$status: ";
print "$answer\n";

print "| " . join(" ", @perfdata) . "\n"  if @perfdata;
print join("\n", @additional) . "\n"  if @additional;

exit 2 if $status eq "Critical";
exit 1 if $status eq "Warning";
exit 0 if $status eq "Ok";
exit 3; # 'Unknown' return code



#
# Check Ikea motion sensor's reachability
#

sub check_motionsensors {

    $ua = LWP::UserAgent->new;
    my $url = "http://$opt_host:8083/fhem?cmd=jsonlist2%20Zigbee_IkeaMotionSensor\\d*&XHR=1";
    $response = $ua->post( $url, [ 'fwcsrf' => $token ] );
    my $json = $response->decoded_content;

    print Dumper( $json )  if  $opt_verbose;

    my $response_json = decode_json( $json );

    print Dumper( $response_json )  if  $opt_verbose;

    my $device_count = 0;
    my $device_ok = 0;

    for my $sensor ( @{ $response_json->{'Results'} } ) {

        $device_count++;

        my $name = $sensor->{'Name'};
        my $reachable = $sensor->{'Internals'}->{'reachable'};

        if ( $reachable eq "1" ) {
            $device_ok++;
            push @additional, "[OK] Device '$name' reachable";
        } else {
            $warn_count++;
            push @additional, "[WARNING] Device '$name' not reachable";
        }

    }

    if ( $device_count == $device_ok ) {
        $answer .= "Alle Fhem-Devices reachable. ";
    } else {
        $warn_count++;
        $answer .= "nur $device_ok von $device_count sind reachable. ";
    }

}



#
# Check battery state of Homematic Heizkoerperthermostate HM-CC-RT-DN
#

sub check_heizkoerperthermostate {

    $ua = LWP::UserAgent->new;
    my $url = "http://$opt_host:8083/fhem?cmd=jsonlist2%20(HM_)?HeizkoerperThermostat.[^_]*&XHR=1";
    $response = $ua->post( $url, [ 'fwcsrf' => $token ] );
    my $json = $response->decoded_content;

    print Dumper( $json )  if  $opt_verbose;

    my $response_json = decode_json( $json );

    print Dumper( $response_json )  if  $opt_verbose;

    my $device_count = 0;
    my $device_ok = 0;

    for my $sensor ( @{ $response_json->{'Results'} } ) {

        $device_count++;

        print Dumper( $sensor )  if  $opt_verbose;
        my $name = $sensor->{'Name'};
        my $battery = $sensor->{'Readings'}->{'battery'}->{'Value'};
        print "# Name=$name, Battery=$battery.\n"  if  $opt_verbose;

        if ( $battery eq "ok" ) {
            $device_ok++;
            push @additional, "[OK] Battery for '$name' ok";
        } else {
            $warn_count++;
            push @additional, "[WARNING] Low battery for '$name'";
        }

    }

    if ( $device_count == $device_ok ) {
        $answer .= "Alle Fhem-Devices ok. ";
    } else {
        $warn_count++;
        $answer .= "nur $device_ok von $device_count haben Batterie=ok. ";
    }

}




#
# Check battery state of Homematic motion sensor HM-SEN-MDIR-O-2
#

sub check_bewegungsmelder {

    $ua = LWP::UserAgent->new;
    my $url = "http://$opt_host:8083/fhem?cmd=jsonlist2%20(HM_)?BewegMelder.*:FILTER=model=HM-SEN-MDIR-O-2&XHR=1";
    $response = $ua->post( $url, [ 'fwcsrf' => $token ] );
    my $json = $response->decoded_content;

    print Dumper( $json )  if  $opt_verbose;

    my $response_json = decode_json( $json );

    print Dumper( $response_json )  if  $opt_verbose;

    my $device_count = 0;
    my $device_ok = 0;

    for my $sensor ( @{ $response_json->{'Results'} } ) {

        $device_count++;

        print Dumper( $sensor )  if  $opt_verbose;
        my $name = $sensor->{'Name'};
        my $battery = $sensor->{'Readings'}->{'battery'}->{'Value'};
        print "# Name=$name, Battery=$battery.\n"  if  $opt_verbose;

        if ( $battery eq "ok" ) {
            $device_ok++;
            push @additional, "[OK] Battery for '$name' ok";
        } else {
            $warn_count++;
            push @additional, "[WARNING] Low battery for '$name'";
        }

    }

    if ( $device_count == $device_ok ) {
        $answer .= "Alle Fhem-Devices ok. ";
    } else {
        $warn_count++;
        $answer .= "nur $device_ok von $device_count haben Batterie=ok. ";
    }

}





#
# Check if the state of MQTTClient is "opened"
#

sub check_mqttclient {

    $ua = LWP::UserAgent->new;
    my $url = "http://$opt_host:8083/fhem?cmd=jsonlist2%20MQTT2Client&XHR=1";
    $response = $ua->post( $url, [ 'fwcsrf' => $token ] );
    my $json = $response->decoded_content;

    print Dumper( $json )  if  $opt_verbose;

    my $response_json = decode_json( $json );

    print Dumper( $response_json )  if  $opt_verbose;

    my $device_count = 0;
    my $device_ok = 0;

    for my $device ( @{ $response_json->{'Results'} } ) {

        $device_count++;

        print Dumper( $device )  if  $opt_verbose;
        my $name = $device->{'Name'};
        my $state_value = $device->{'Readings'}->{'state'}->{'Value'};
        print "# Name=$name, StateValue=$state_value.\n"  if  $opt_verbose;

        if ( $state_value eq "opened" ) {
            $device_ok++;
            push @additional, "[OK] Device '$name' is opened";
        } else {
            $warn_count++;
            push @additional, "[WARNING] Device '$name' is not opened";
        }

    }

    if ( $device_count == $device_ok ) {
        $answer .= "Alle Fhem-Devices ok. ";
    } else {
        $warn_count++;
        $answer .= "nur $device_ok von $device_count haben state=opened. ";
    }

}
